{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/controllers/main.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","templateUrl","controller","otherwise","Auth","$authProvider","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","MainController","$rootScope","logout","main","isLoggedIn","isAuthenticated","angular","module","config","$inject"],"mappings":"YAMA,SAASA,QAAOC,EAAgBC,GAC9BD,EAqBGE,MAAM,YACLC,IAAK,YACLC,YAAa,2BACbC,WAAY,mCAEbH,MAAM,SACLC,IAAK,SACLC,YAAa,wBACbC,WAAY,6BAEbH,MAAM,QACLC,IAAK,QACLC,YAAa,yBAEjBH,EAAmBK,UAAU,UAI/B,QAASC,MAAKC,GACZA,EAAcC,SAAW,SACzBD,EAAcE,UAAY,YAE1BF,EAAcG,YAAc,GC7C9B,QAASC,oBAAmBC,EAAOC,GAKjC,QAASC,KACPF,EAAMG,OAAOC,EAASC,MACnBC,KAAK,WACJL,EAAOM,GAAG,UAPhB,GAAMH,GAAWI,IAEjBJ,GAASC,QASTD,EAASF,OAASA,EAIpB,QAASO,iBAAgBT,EAAOC,GAI9B,QAASC,KACPF,EAAMU,MAAMA,EAAMC,aACfL,KAAK,WACJL,EAAOM,GAAG,UANhB,GAAMG,GAAQF,IAEdE,GAAMC,eAQND,EAAMR,OAASA,EC7BjB,QAASU,gBAAeZ,EAAOC,EAAQY,GAGrC,QAASC,KACPd,EAAMc,SACHR,KAAK,WACJL,EAAOM,GAAG,WALhB,GAAMQ,GAAOP,IACbO,GAAKC,WAAahB,EAAMiB,gBAOxBF,EAAKD,OAASA,EFZhBI,QACGC,OAAO,YAAa,aAAc,YAAa,eAC/CC,OAAOlC,QACPkC,OAAO1B,MAEVR,OAAOmC,SAAW,iBAAkB,sBAwCpC3B,KAAK2B,SAAW,iBC7ChBH,QAAQC,OAAO,YACV3B,WAAW,qBAAsBO,oBACjCP,WAAW,kBAAmBiB,iBAEnCV,mBAAmBsB,SAAW,QAAS,UAgBvCZ,gBAAgBY,SAAW,QAAS,UCpBpCH,QAAQC,OAAO,YACZ3B,WAAW,iBAAkBoB,gBAChCA,eAAeS,SAAW,QAAS,SAAU","file":"app.js","sourcesContent":["angular\n  .module('boardApp', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router)\n  .config(Auth);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    // .state('usersIndex', {\n    //   url: '/users',\n    //   templateUrl: '/templates/usersIndex.html',\n    //   controller: 'UsersIndexController as usersIndex'\n    // })\n    // .state('usersNew', {\n    //   url: '/users/new',\n    //   templateUrl: '/templates/usersNew.html',\n    //   controller: 'UsersNewController as usersNew'\n    // })\n    // .state('usersShow', {\n    //   url: '/users/:id',\n    //   templateUrl: '/templates/usersShow.html',\n    //   controller: 'UsersShowController as usersShow'\n    // })\n    // .state('usersEdit', {\n    //   url: '/users/:id/edit',\n    //   templateUrl: '/templates/usersEdit.html',\n    //   controller: 'UsersEditController as usersEdit'\n    // })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('test', {\n      url: '/test',\n      templateUrl: '/templates/test.html'\n    })\n  $urlRouterProvider.otherwise('/users');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('boardApp')\n    .controller('RegisterController', RegisterController)\n    .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('test');\n      });\n  }\n\n  register.submit = submit;\n\n}\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('test');\n      });\n  }\n\n  login.submit = submit;\n\n}\n","angular.module('boardApp')\n  .controller('MainController', MainController);\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n  main.isLoggedIn = $auth.isAuthenticated;\n  function logout() {\n    $auth.logout()\n      .then(() => {\n        $state.go('login');\n      });\n  }\n  main.logout = logout;\n}\n"]}